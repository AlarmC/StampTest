{"mappings":"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","sources":["src/src/models/kakao/kakaoButton.ts","src/src/models/kakao/kakaoOption.ts","src/src/models/message.ts","src/src/types/commonTypes.ts","src/src/models/kakao/kakaoChannel.ts","src/src/models/kakao/kakaoAlimtalkTemplate.ts","src/src/responses/messageResponses.ts","src/src/errors/defaultError.ts","src/src/lib/stringDateTrasnfer.ts","src/src/requests/messageRequest.ts","src/src/lib/authenticator.ts","src/src/lib/defaultFetcher.ts","src/src/lib/queryParameterGenerator.ts","src/src/solapi.ts","src/solapi.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import {Message} from './models/message';\nimport {\n    CreateGroupRequest,\n    CreateKakaoAlimtalkTemplateRequest,\n    CreateKakaoChannelRequest,\n    CreateKakaoChannelTokenRequest,\n    defaultAgent,\n    FileType,\n    FileUploadRequest,\n    GetGroupMessagesRequest,\n    GetGroupsRequest,\n    GetKakaoAlimtalkTemplatesRequest,\n    GetKakaoChannelsRequest,\n    GetMessagesRequest,\n    GetMessagesRequestType,\n    GetStatisticsRequest,\n    GetStatisticsRequestType,\n    GroupMessageAddRequest,\n    KakaoAlimtalkTemplateRequest,\n    MultipleDetailMessageSendingRequest,\n    MultipleMessageSendingRequest,\n    RemoveMessageIdsToGroupRequest,\n    RequestConfig,\n    ScheduledDateSendingRequest,\n    SingleMessageSendingRequest\n} from './requests/messageRequest';\nimport defaultFetcher from './lib/defaultFetcher';\nimport {\n    AddMessageResponse,\n    CreateKakaoChannelResponse,\n    DetailGroupMessageResponse,\n    FileUploadResponse,\n    GetBalanceResponse,\n    GetGroupsResponse,\n    GetKakaoAlimtalkTemplatesResponse,\n    GetKakaoChannelsResponse,\n    GetMessagesResponse,\n    GetStatisticsResponse,\n    GroupMessageResponse,\n    RemoveGroupMessagesResponse,\n    RequestKakaoChannelTokenResponse,\n    SingleMessageSentResponse\n} from './responses/messageResponses';\nimport {DateOperatorType, GroupId} from './types/commonTypes';\nimport queryParameterGenerator from './lib/queryParameterGenerator';\nimport {formatISO} from 'date-fns';\nimport ImageToBase64 from 'image-to-base64';\nimport stringDateTransfer from './lib/stringDateTrasnfer';\nimport {MessageNotReceivedError} from './errors/defaultError';\nimport {KakaoAlimtalkTemplateCategory, KakaoChannel, KakaoChannelCategory} from './models/kakao/kakaoChannel';\nimport {KakaoAlimtalkTemplate} from './models/kakao/kakaoAlimtalkTemplate';\nimport qs from 'qs';\n\ntype AuthInfo = {\n    apiKey: string,\n    apiSecret: string\n}\n\n/**\n * SOLAPI 메시지 서비스\n * 발송 및 조회 등 SOLAPI에서 제공되는 여러 API의 기능을 쉽게 사용할 수 있습니다.\n * SOLAPI 자체의 서비스에 관한 사항은 SOLAPI 홈페이지를 참고해주세요.\n * @see https://solapi.github.io/solapi-nodejs\n */\nexport class SolapiMessageService {\n    private readonly baseUrl = 'https://api.solapi.com';\n    private readonly authInfo: AuthInfo;\n\n    constructor(apiKey: string, apiSecret: string) {\n        this.authInfo = {\n            apiKey,\n            apiSecret\n        };\n    }\n\n    /**\n     * 메시지 발송 기능, sendMany 함수에서 조금 더 개선된 오류 표시 기능등을 제공합니다.\n     * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.\n     * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)\n     * @param scheduledDate 예약일시\n     * @param allowDuplicates 중복 수신번호 허용 여부\n     * @param appId appstore용 app id\n     * @throws MessageNotReceivedError 메시지가 모두 발송 접수가 불가한 상태일 경우 MessageNotReceivedError 예외가 발생합니다.\n     */\n    async send(messages: Message | Array<Message>, scheduledDate?: string | Date, allowDuplicates = false, appId?: string): Promise<DetailGroupMessageResponse> {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        const parameter = new MultipleDetailMessageSendingRequest(messages, allowDuplicates, appId, scheduledDate);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many/detail`\n        };\n        return defaultFetcher<MultipleDetailMessageSendingRequest, DetailGroupMessageResponse>(this.authInfo, requestConfig, parameter)\n            .then(res => {\n                const count = res.groupInfo.count;\n                if (res.failedMessageList.length > 0 && count.total === count.registeredFailed) {\n                    throw new MessageNotReceivedError(res.failedMessageList);\n                }\n                return res;\n            });\n    }\n\n    /**\n     * 단일 메시지 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param appId appstore용 app id\n     */\n    async sendOne(message: Message, appId?: string): Promise<SingleMessageSentResponse> {\n        const parameter = new SingleMessageSendingRequest(message, false, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send`\n        };\n        return defaultFetcher<SingleMessageSendingRequest, SingleMessageSentResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 단일 메시지 예약 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param scheduledDate 예약일시\n     */\n    async sendOneFuture(message: Message, scheduledDate: string | Date): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup();\n        await this.addMessagesToGroup(groupId, [message]);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!\n     * 여러 메시지 즉시 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendMany(messages: Array<Message>, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const parameter = new MultipleMessageSendingRequest(messages, allowDuplicates, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many`\n        };\n        return defaultFetcher<MultipleMessageSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!\n     * 여러 메시지 예약 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param scheduledDate 예약 발송 일자\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendManyFuture(messages: Array<Message>, scheduledDate: string | Date, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup(allowDuplicates, appId);\n        await this.addMessagesToGroup(groupId, messages);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * 그룹 생성\n     */\n    async createGroup(allowDuplicates?: boolean, appId?: string): Promise<GroupId> {\n        allowDuplicates = allowDuplicates ?? false;\n        const {sdkVersion, osPlatform} = defaultAgent;\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups`\n        };\n        return defaultFetcher<CreateGroupRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            sdkVersion,\n            osPlatform,\n            allowDuplicates,\n            appId\n        }).then(res => res.groupId);\n    }\n\n    /**\n     * 그룹 메시지 추가\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param groupId 생성 된 Group ID\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     */\n    async addMessagesToGroup(groupId: GroupId, messages: Required<Array<Message>>): Promise<AddMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<GroupMessageAddRequest, AddMessageResponse>(this.authInfo, requestConfig, new GroupMessageAddRequest(messages));\n    }\n\n    /**\n     * 그룹 메시지 전송 요청\n     * @param groupId 생성 된 Group ID\n     */\n    async sendGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 예약 발송 설정\n     * @param groupId 생성 된 Group ID\n     * @param scheduledDate 예약발송 할 날짜\n     */\n    async reserveGroup(groupId: GroupId, scheduledDate: Date) {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        const formattedScheduledDate = formatISO(scheduledDate);\n        return defaultFetcher<ScheduledDateSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            scheduledDate: formattedScheduledDate\n        });\n    }\n\n    /**\n     * 단일 그룹정보 조회\n     * @param groupId 그룹 ID\n     */\n    async getGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}//messages/v4/groups/${groupId}`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 통계 정보 조회\n     * @param data 그룹 정보 상세 조회용 request 데이터, date 관련 파라미터는 iso8601 포맷으로 보내야 함\n     */\n    async getGroups(data?: GetGroupsRequest) {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetGroupsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 메시지 목록 조회\n     * @param groupId 생성 된 Group ID\n     * @param data startkey, limit 등 쿼리 조건 파라미터\n     */\n    async getGroupMessages(groupId: GroupId, data?: GetGroupMessagesRequest): Promise<GetMessagesResponse> {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups/${groupId}/messages`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 특정 메시지 삭제\n     * @param groupId 생성 된 Group Id\n     * @param messageIds 생성 된 메시지 ID 목록\n     */\n    async removeGroupMessages(groupId: GroupId, messageIds: Required<Array<string>>): Promise<RemoveGroupMessagesResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<RemoveMessageIdsToGroupRequest, RemoveGroupMessagesResponse>(this.authInfo, requestConfig, {messageIds});\n    }\n\n    /**\n     * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\n     * @param groupId 생성 된 Group ID\n     */\n    async removeReservationToGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 삭제\n     * @param groupId\n     */\n    async removeGroup(groupId: GroupId) {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 메시지 목록 조회\n     * @param data 목록 조회 상세조건 파라미터\n     */\n    async getMessages(data?: Readonly<GetMessagesRequestType>): Promise<GetMessagesResponse> {\n        const parameter: GetMessagesRequest | object = data ? new GetMessagesRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/list`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 통계 조회\n     * @param data 통계 상세 조건 파라미터\n     * @returns GetStatisticsResponse 통계 결과\n     */\n    async getStatistics(data?: Readonly<GetStatisticsRequestType>): Promise<GetStatisticsResponse> {\n        const parameter: GetStatisticsRequest | object = data ? new GetStatisticsRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/statistics`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetStatisticsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 잔액조회\n     * @returns GetBalanceResponse\n     */\n    async getBalance(): Promise<GetBalanceResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/cash/v1/balance`\n        };\n        return defaultFetcher<never, GetBalanceResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 파일(이미지) 업로드\n     * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\n     * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\n     * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\n     * @param name 파일 이름\n     * @param link 파일 링크, 친구톡의 경우 필수 값\n     */\n    async uploadFile(filePath: string, fileType: FileType, name?: string, link?: string): Promise<FileUploadResponse> {\n        const encodedFile = await ImageToBase64(filePath);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/storage/v1/files`\n        };\n        const parameter: FileUploadRequest = {\n            file: encodedFile,\n            type: fileType,\n            name,\n            link\n        };\n        return defaultFetcher<FileUploadRequest, FileUploadResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 카카오 채널 카테고리 조회\n     */\n    async getKakaoChannelCategories(): Promise<Array<KakaoChannelCategory>> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/categories`\n        };\n        return defaultFetcher<never, Array<KakaoChannelCategory>>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 채널 목록 조회\n     * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터\n     */\n    async getKakaoChannels(data?: Partial<GetKakaoChannelsRequest>): Promise<GetKakaoChannelsResponse> {\n        const payload = data;\n        if (payload?.dateCreated && typeof payload?.dateCreated != 'undefined') {\n            const dateCreatedPayload = payload.dateCreated;\n            Object.keys(dateCreatedPayload).forEach((key) => {\n                const dateKey = key as DateOperatorType;\n                const dateCreated = dateCreatedPayload[dateKey];\n                if (dateCreated) {\n                    const formattedDateCreated = formatISO(stringDateTransfer(dateCreated));\n                    if (payload.dateCreated) {\n                        payload.dateCreated[dateKey] = formattedDateCreated;\n                    }\n                }\n            });\n        }\n\n        if (data?.dateUpdated && typeof payload?.dateUpdated != 'undefined') {\n            const dateUpdatedPayload = payload.dateUpdated;\n            Object.keys(dateUpdatedPayload).forEach(key => {\n                const dateKey = key as DateOperatorType;\n                const dateUpdated = dateUpdatedPayload[dateKey];\n                if (dateUpdated) {\n                    const formattedDateUpdated = formatISO(stringDateTransfer(dateUpdated));\n                    if (payload.dateUpdated) {\n                        payload.dateUpdated[dateKey] = formattedDateUpdated;\n                    }\n                }\n            });\n        }\n\n        const parameter = qs.stringify(payload, {indices: false});\n        const endpoint = `${this.baseUrl}/kakao/v2/channels?${parameter}`;\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetKakaoChannelsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 채널 조회\n     * @param channelId 카카오 채널 ID(구 pfId)\n     */\n    async getKakaoChannel(channelId: string): Promise<KakaoChannel> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        return defaultFetcher<never, KakaoChannel>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 채널 연동을 위한 인증 토큰 요청\n     */\n    async requestKakaoChannelToken(data: CreateKakaoChannelTokenRequest): Promise<RequestKakaoChannelTokenResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels/token`\n        };\n        return defaultFetcher<CreateKakaoChannelTokenRequest, RequestKakaoChannelTokenResponse>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * @description 카카오 채널 연동 메소드\n     * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!\n     */\n    async createKakaoChannel(data: CreateKakaoChannelRequest): Promise<CreateKakaoChannelResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels`\n        };\n        return defaultFetcher<CreateKakaoChannelRequest, CreateKakaoChannelResponse>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!\n     * @param channelId 카카오 채널 ID\n     */\n    async removeKakaoChannel(channelId: string): Promise<KakaoChannel> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        return defaultFetcher<never, KakaoChannel>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 목록 조회\n     * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터\n     */\n    async getKakaoAlimtalkTemplates(data?: Partial<GetKakaoAlimtalkTemplatesRequest>): Promise<GetKakaoAlimtalkTemplatesResponse> {\n        // TODO: need to eliminate duplicate code\n        const payload = data;\n        if (payload?.dateCreated && typeof payload?.dateCreated != 'undefined') {\n            const dateCreatedPayload = payload.dateCreated;\n            Object.keys(dateCreatedPayload).forEach((key) => {\n                const dateKey = key as DateOperatorType;\n                const dateCreated = dateCreatedPayload[dateKey];\n                if (dateCreated) {\n                    const formattedDateCreated = formatISO(stringDateTransfer(dateCreated));\n                    if (payload.dateCreated) {\n                        payload.dateCreated[dateKey] = formattedDateCreated;\n                    }\n                }\n            });\n        }\n\n        if (data?.dateUpdated && typeof payload?.dateUpdated != 'undefined') {\n            const dateUpdatedPayload = payload.dateUpdated;\n            Object.keys(dateUpdatedPayload).forEach(key => {\n                const dateKey = key as DateOperatorType;\n                const dateUpdated = dateUpdatedPayload[dateKey];\n                if (dateUpdated) {\n                    const formattedDateUpdated = formatISO(stringDateTransfer(dateUpdated));\n                    if (payload.dateUpdated) {\n                        payload.dateUpdated[dateKey] = formattedDateUpdated;\n                    }\n                }\n            });\n        }\n\n        const parameter = qs.stringify(payload, {indices: false});\n        const endpoint = `${this.baseUrl}/kakao/v2/templates?${parameter}`;\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetKakaoAlimtalkTemplatesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 상세 조회\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async getKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 카테고리 조회\n     */\n    async getKakaoAlimtalkTemplateCategories(): Promise<Array<KakaoAlimtalkTemplateCategory>> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/categories`\n        };\n        return defaultFetcher<never, Array<KakaoAlimtalkTemplateCategory>>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 알림톡 템플릿 생성\n     * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!\n     * @param data 알림톡 템플릿 생성을 위한 파라미터\n     */\n    async createKakaoAlimtalkTemplate(data: CreateKakaoAlimtalkTemplateRequest): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/templates`\n        };\n        return defaultFetcher<CreateKakaoAlimtalkTemplateRequest, KakaoAlimtalkTemplate>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 검수 요청\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async requestInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n\n    /**\n     * 카카오 알림톡 템플릿 검수 취소 요청\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async cancelInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection/cancel`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 수정(검수 X)\n     * @param templateId 카카오 알림톡 템플릿 ID\n     * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터\n     */\n    async updateKakaoAlimtalkTemplate(templateId: string, data: KakaoAlimtalkTemplateRequest): Promise<object> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<KakaoAlimtalkTemplateRequest, object>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async deleteKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n}\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}