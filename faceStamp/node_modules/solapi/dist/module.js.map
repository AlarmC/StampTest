{"mappings":"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","sources":["src/solapi.ts","src/requests/messageRequest.ts","src/lib/stringDateTrasnfer.ts","src/errors/defaultError.ts","src/lib/defaultFetcher.ts","src/lib/authenticator.ts","src/lib/queryParameterGenerator.ts"],"sourcesContent":["import {Message} from './models/message';\nimport {\n    CreateGroupRequest,\n    CreateKakaoAlimtalkTemplateRequest,\n    CreateKakaoChannelRequest,\n    CreateKakaoChannelTokenRequest,\n    defaultAgent,\n    FileType,\n    FileUploadRequest,\n    GetGroupMessagesRequest,\n    GetGroupsRequest,\n    GetKakaoAlimtalkTemplatesRequest,\n    GetKakaoChannelsRequest,\n    GetMessagesRequest,\n    GetMessagesRequestType,\n    GetStatisticsRequest,\n    GetStatisticsRequestType,\n    GroupMessageAddRequest,\n    KakaoAlimtalkTemplateRequest,\n    MultipleDetailMessageSendingRequest,\n    MultipleMessageSendingRequest,\n    RemoveMessageIdsToGroupRequest,\n    RequestConfig,\n    ScheduledDateSendingRequest,\n    SingleMessageSendingRequest\n} from './requests/messageRequest';\nimport defaultFetcher from './lib/defaultFetcher';\nimport {\n    AddMessageResponse,\n    CreateKakaoChannelResponse,\n    DetailGroupMessageResponse,\n    FileUploadResponse,\n    GetBalanceResponse,\n    GetGroupsResponse,\n    GetKakaoAlimtalkTemplatesResponse,\n    GetKakaoChannelsResponse,\n    GetMessagesResponse,\n    GetStatisticsResponse,\n    GroupMessageResponse,\n    RemoveGroupMessagesResponse,\n    RequestKakaoChannelTokenResponse,\n    SingleMessageSentResponse\n} from './responses/messageResponses';\nimport {DateOperatorType, GroupId} from './types/commonTypes';\nimport queryParameterGenerator from './lib/queryParameterGenerator';\nimport {formatISO} from 'date-fns';\nimport ImageToBase64 from 'image-to-base64';\nimport stringDateTransfer from './lib/stringDateTrasnfer';\nimport {MessageNotReceivedError} from './errors/defaultError';\nimport {KakaoAlimtalkTemplateCategory, KakaoChannel, KakaoChannelCategory} from './models/kakao/kakaoChannel';\nimport {KakaoAlimtalkTemplate} from './models/kakao/kakaoAlimtalkTemplate';\nimport qs from 'qs';\n\ntype AuthInfo = {\n    apiKey: string,\n    apiSecret: string\n}\n\n/**\n * SOLAPI 메시지 서비스\n * 발송 및 조회 등 SOLAPI에서 제공되는 여러 API의 기능을 쉽게 사용할 수 있습니다.\n * SOLAPI 자체의 서비스에 관한 사항은 SOLAPI 홈페이지를 참고해주세요.\n * @see https://solapi.github.io/solapi-nodejs\n */\nexport class SolapiMessageService {\n    private readonly baseUrl = 'https://api.solapi.com';\n    private readonly authInfo: AuthInfo;\n\n    constructor(apiKey: string, apiSecret: string) {\n        this.authInfo = {\n            apiKey,\n            apiSecret\n        };\n    }\n\n    /**\n     * 메시지 발송 기능, sendMany 함수에서 조금 더 개선된 오류 표시 기능등을 제공합니다.\n     * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.\n     * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)\n     * @param scheduledDate 예약일시\n     * @param allowDuplicates 중복 수신번호 허용 여부\n     * @param appId appstore용 app id\n     * @throws MessageNotReceivedError 메시지가 모두 발송 접수가 불가한 상태일 경우 MessageNotReceivedError 예외가 발생합니다.\n     */\n    async send(messages: Message | Array<Message>, scheduledDate?: string | Date, allowDuplicates = false, appId?: string): Promise<DetailGroupMessageResponse> {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        const parameter = new MultipleDetailMessageSendingRequest(messages, allowDuplicates, appId, scheduledDate);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many/detail`\n        };\n        return defaultFetcher<MultipleDetailMessageSendingRequest, DetailGroupMessageResponse>(this.authInfo, requestConfig, parameter)\n            .then(res => {\n                const count = res.groupInfo.count;\n                if (res.failedMessageList.length > 0 && count.total === count.registeredFailed) {\n                    throw new MessageNotReceivedError(res.failedMessageList);\n                }\n                return res;\n            });\n    }\n\n    /**\n     * 단일 메시지 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param appId appstore용 app id\n     */\n    async sendOne(message: Message, appId?: string): Promise<SingleMessageSentResponse> {\n        const parameter = new SingleMessageSendingRequest(message, false, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send`\n        };\n        return defaultFetcher<SingleMessageSendingRequest, SingleMessageSentResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 단일 메시지 예약 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param scheduledDate 예약일시\n     */\n    async sendOneFuture(message: Message, scheduledDate: string | Date): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup();\n        await this.addMessagesToGroup(groupId, [message]);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!\n     * 여러 메시지 즉시 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendMany(messages: Array<Message>, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const parameter = new MultipleMessageSendingRequest(messages, allowDuplicates, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many`\n        };\n        return defaultFetcher<MultipleMessageSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!\n     * 여러 메시지 예약 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param scheduledDate 예약 발송 일자\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendManyFuture(messages: Array<Message>, scheduledDate: string | Date, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup(allowDuplicates, appId);\n        await this.addMessagesToGroup(groupId, messages);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * 그룹 생성\n     */\n    async createGroup(allowDuplicates?: boolean, appId?: string): Promise<GroupId> {\n        allowDuplicates = allowDuplicates ?? false;\n        const {sdkVersion, osPlatform} = defaultAgent;\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups`\n        };\n        return defaultFetcher<CreateGroupRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            sdkVersion,\n            osPlatform,\n            allowDuplicates,\n            appId\n        }).then(res => res.groupId);\n    }\n\n    /**\n     * 그룹 메시지 추가\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param groupId 생성 된 Group ID\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     */\n    async addMessagesToGroup(groupId: GroupId, messages: Required<Array<Message>>): Promise<AddMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<GroupMessageAddRequest, AddMessageResponse>(this.authInfo, requestConfig, new GroupMessageAddRequest(messages));\n    }\n\n    /**\n     * 그룹 메시지 전송 요청\n     * @param groupId 생성 된 Group ID\n     */\n    async sendGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 예약 발송 설정\n     * @param groupId 생성 된 Group ID\n     * @param scheduledDate 예약발송 할 날짜\n     */\n    async reserveGroup(groupId: GroupId, scheduledDate: Date) {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        const formattedScheduledDate = formatISO(scheduledDate);\n        return defaultFetcher<ScheduledDateSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            scheduledDate: formattedScheduledDate\n        });\n    }\n\n    /**\n     * 단일 그룹정보 조회\n     * @param groupId 그룹 ID\n     */\n    async getGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}//messages/v4/groups/${groupId}`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 통계 정보 조회\n     * @param data 그룹 정보 상세 조회용 request 데이터, date 관련 파라미터는 iso8601 포맷으로 보내야 함\n     */\n    async getGroups(data?: GetGroupsRequest) {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetGroupsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 메시지 목록 조회\n     * @param groupId 생성 된 Group ID\n     * @param data startkey, limit 등 쿼리 조건 파라미터\n     */\n    async getGroupMessages(groupId: GroupId, data?: GetGroupMessagesRequest): Promise<GetMessagesResponse> {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups/${groupId}/messages`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 특정 메시지 삭제\n     * @param groupId 생성 된 Group Id\n     * @param messageIds 생성 된 메시지 ID 목록\n     */\n    async removeGroupMessages(groupId: GroupId, messageIds: Required<Array<string>>): Promise<RemoveGroupMessagesResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<RemoveMessageIdsToGroupRequest, RemoveGroupMessagesResponse>(this.authInfo, requestConfig, {messageIds});\n    }\n\n    /**\n     * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\n     * @param groupId 생성 된 Group ID\n     */\n    async removeReservationToGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 삭제\n     * @param groupId\n     */\n    async removeGroup(groupId: GroupId) {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\n        };\n        return defaultFetcher<never, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 메시지 목록 조회\n     * @param data 목록 조회 상세조건 파라미터\n     */\n    async getMessages(data?: Readonly<GetMessagesRequestType>): Promise<GetMessagesResponse> {\n        const parameter: GetMessagesRequest | object = data ? new GetMessagesRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/list`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 통계 조회\n     * @param data 통계 상세 조건 파라미터\n     * @returns GetStatisticsResponse 통계 결과\n     */\n    async getStatistics(data?: Readonly<GetStatisticsRequestType>): Promise<GetStatisticsResponse> {\n        const parameter: GetStatisticsRequest | object = data ? new GetStatisticsRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/statistics`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetStatisticsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 잔액조회\n     * @returns GetBalanceResponse\n     */\n    async getBalance(): Promise<GetBalanceResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/cash/v1/balance`\n        };\n        return defaultFetcher<never, GetBalanceResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 파일(이미지) 업로드\n     * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\n     * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\n     * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\n     * @param name 파일 이름\n     * @param link 파일 링크, 친구톡의 경우 필수 값\n     */\n    async uploadFile(filePath: string, fileType: FileType, name?: string, link?: string): Promise<FileUploadResponse> {\n        const encodedFile = await ImageToBase64(filePath);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/storage/v1/files`\n        };\n        const parameter: FileUploadRequest = {\n            file: encodedFile,\n            type: fileType,\n            name,\n            link\n        };\n        return defaultFetcher<FileUploadRequest, FileUploadResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 카카오 채널 카테고리 조회\n     */\n    async getKakaoChannelCategories(): Promise<Array<KakaoChannelCategory>> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/categories`\n        };\n        return defaultFetcher<never, Array<KakaoChannelCategory>>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 채널 목록 조회\n     * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터\n     */\n    async getKakaoChannels(data?: Partial<GetKakaoChannelsRequest>): Promise<GetKakaoChannelsResponse> {\n        const payload = data;\n        if (payload?.dateCreated && typeof payload?.dateCreated != 'undefined') {\n            const dateCreatedPayload = payload.dateCreated;\n            Object.keys(dateCreatedPayload).forEach((key) => {\n                const dateKey = key as DateOperatorType;\n                const dateCreated = dateCreatedPayload[dateKey];\n                if (dateCreated) {\n                    const formattedDateCreated = formatISO(stringDateTransfer(dateCreated));\n                    if (payload.dateCreated) {\n                        payload.dateCreated[dateKey] = formattedDateCreated;\n                    }\n                }\n            });\n        }\n\n        if (data?.dateUpdated && typeof payload?.dateUpdated != 'undefined') {\n            const dateUpdatedPayload = payload.dateUpdated;\n            Object.keys(dateUpdatedPayload).forEach(key => {\n                const dateKey = key as DateOperatorType;\n                const dateUpdated = dateUpdatedPayload[dateKey];\n                if (dateUpdated) {\n                    const formattedDateUpdated = formatISO(stringDateTransfer(dateUpdated));\n                    if (payload.dateUpdated) {\n                        payload.dateUpdated[dateKey] = formattedDateUpdated;\n                    }\n                }\n            });\n        }\n\n        const parameter = qs.stringify(payload, {indices: false});\n        const endpoint = `${this.baseUrl}/kakao/v2/channels?${parameter}`;\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetKakaoChannelsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 채널 조회\n     * @param channelId 카카오 채널 ID(구 pfId)\n     */\n    async getKakaoChannel(channelId: string): Promise<KakaoChannel> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        return defaultFetcher<never, KakaoChannel>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 채널 연동을 위한 인증 토큰 요청\n     */\n    async requestKakaoChannelToken(data: CreateKakaoChannelTokenRequest): Promise<RequestKakaoChannelTokenResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels/token`\n        };\n        return defaultFetcher<CreateKakaoChannelTokenRequest, RequestKakaoChannelTokenResponse>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * @description 카카오 채널 연동 메소드\n     * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!\n     */\n    async createKakaoChannel(data: CreateKakaoChannelRequest): Promise<CreateKakaoChannelResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels`\n        };\n        return defaultFetcher<CreateKakaoChannelRequest, CreateKakaoChannelResponse>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!\n     * @param channelId 카카오 채널 ID\n     */\n    async removeKakaoChannel(channelId: string): Promise<KakaoChannel> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        return defaultFetcher<never, KakaoChannel>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 목록 조회\n     * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터\n     */\n    async getKakaoAlimtalkTemplates(data?: Partial<GetKakaoAlimtalkTemplatesRequest>): Promise<GetKakaoAlimtalkTemplatesResponse> {\n        // TODO: need to eliminate duplicate code\n        const payload = data;\n        if (payload?.dateCreated && typeof payload?.dateCreated != 'undefined') {\n            const dateCreatedPayload = payload.dateCreated;\n            Object.keys(dateCreatedPayload).forEach((key) => {\n                const dateKey = key as DateOperatorType;\n                const dateCreated = dateCreatedPayload[dateKey];\n                if (dateCreated) {\n                    const formattedDateCreated = formatISO(stringDateTransfer(dateCreated));\n                    if (payload.dateCreated) {\n                        payload.dateCreated[dateKey] = formattedDateCreated;\n                    }\n                }\n            });\n        }\n\n        if (data?.dateUpdated && typeof payload?.dateUpdated != 'undefined') {\n            const dateUpdatedPayload = payload.dateUpdated;\n            Object.keys(dateUpdatedPayload).forEach(key => {\n                const dateKey = key as DateOperatorType;\n                const dateUpdated = dateUpdatedPayload[dateKey];\n                if (dateUpdated) {\n                    const formattedDateUpdated = formatISO(stringDateTransfer(dateUpdated));\n                    if (payload.dateUpdated) {\n                        payload.dateUpdated[dateKey] = formattedDateUpdated;\n                    }\n                }\n            });\n        }\n\n        const parameter = qs.stringify(payload, {indices: false});\n        const endpoint = `${this.baseUrl}/kakao/v2/templates?${parameter}`;\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<never, GetKakaoAlimtalkTemplatesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 상세 조회\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async getKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 템플릿 카테고리 조회\n     */\n    async getKakaoAlimtalkTemplateCategories(): Promise<Array<KakaoAlimtalkTemplateCategory>> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/categories`\n        };\n        return defaultFetcher<never, Array<KakaoAlimtalkTemplateCategory>>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * @description 카카오 알림톡 템플릿 생성\n     * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!\n     * @param data 알림톡 템플릿 생성을 위한 파라미터\n     */\n    async createKakaoAlimtalkTemplate(data: CreateKakaoAlimtalkTemplateRequest): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/templates`\n        };\n        return defaultFetcher<CreateKakaoAlimtalkTemplateRequest, KakaoAlimtalkTemplate>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 검수 요청\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async requestInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n\n    /**\n     * 카카오 알림톡 템플릿 검수 취소 요청\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async cancelInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection/cancel`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 수정(검수 X)\n     * @param templateId 카카오 알림톡 템플릿 ID\n     * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터\n     */\n    async updateKakaoAlimtalkTemplate(templateId: string, data: KakaoAlimtalkTemplateRequest): Promise<object> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<KakaoAlimtalkTemplateRequest, object>(this.authInfo, requestConfig, data);\n    }\n\n    /**\n     * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n     * @param templateId 카카오 알림톡 템플릿 ID\n     */\n    async deleteKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        return defaultFetcher<never, KakaoAlimtalkTemplate>(this.authInfo, requestConfig);\n    }\n}\n","import {Message, MessageType} from '../models/message';\nimport {DateOperatorType, GroupId, KakaoAlimtalkTemplateStatus} from '../types/commonTypes';\nimport {formatISO} from 'date-fns';\nimport stringDateTransfer from '../lib/stringDateTrasnfer';\nimport {KakaoButton} from '../models/kakao/kakaoButton';\nimport {\n    KakaoAlimtalkTemplateEmphasizeType,\n    KakaoAlimtalkTemplateMessageType\n} from '../models/kakao/kakaoAlimtalkTemplate';\n\nexport type DefaultAgentType = {\n    sdkVersion: string\n    osPlatform: string\n    appId?: string;\n};\n\nconst sdkVersion = 'nodejs/5.1.4';\n\nexport const defaultAgent: DefaultAgentType = {\n    sdkVersion,\n    osPlatform: `${process.platform} | ${process.version}`,\n};\n\nabstract class DefaultMessageRequest {\n    allowDuplicates: boolean;\n    protected agent: DefaultAgentType;\n\n    protected constructor() {\n        this.agent = defaultAgent;\n        this.allowDuplicates = false;\n    }\n}\n\nexport class SingleMessageSendingRequest extends DefaultMessageRequest {\n    message: Message;\n\n    constructor(message: Message, allowDuplicates?: boolean, appId?: string) {\n        super();\n        this.message = message;\n        if (typeof allowDuplicates === 'boolean') {\n            this.allowDuplicates = allowDuplicates;\n        }\n        if (appId) {\n            this.agent.appId = appId;\n        }\n    }\n}\n\nexport class MultipleMessageSendingRequest extends DefaultMessageRequest {\n    messages: Array<Message>;\n\n    constructor(messages: Array<Message>, allowDuplicates?: boolean, appId?: string) {\n        super();\n        this.messages = messages;\n        if (typeof allowDuplicates === 'boolean') {\n            this.allowDuplicates = allowDuplicates;\n        }\n        if (appId) {\n            this.agent.appId = appId;\n        }\n    }\n}\n\nexport class MultipleDetailMessageSendingRequest extends DefaultMessageRequest {\n    messages: Array<Message>;\n    scheduledDate: string;\n\n    constructor(messages: Array<Message>, allowDuplicates?: boolean, appId?: string, scheduledDate?: string | Date) {\n        super();\n        this.messages = messages;\n        if (typeof allowDuplicates === 'boolean') {\n            this.allowDuplicates = allowDuplicates;\n        }\n        if (appId) {\n            this.agent.appId = appId;\n        }\n        if (scheduledDate) {\n            this.scheduledDate = formatISO(stringDateTransfer(scheduledDate));\n        }\n    }\n\n}\n\nexport class GroupMessageAddRequest {\n    messages: Array<Message>;\n\n    constructor(messages: Array<Message>) {\n        this.messages = messages;\n    }\n}\n\nexport type ScheduledDateSendingRequest = {\n    scheduledDate: string\n}\n\nexport type RemoveMessageIdsToGroupRequest = {\n    messageIds: Array<string>\n}\n\nexport type GetGroupMessagesRequest = {\n    startKey?: string,\n    limit?: number\n}\n\nexport type GetGroupsRequest = {\n    startKey?: string,\n    limit?: number,\n    startDate?: string,\n    endDate?: string\n}\n\nexport type RequestConfig = {\n    method: string,\n    url: string\n}\n\ntype DateType = 'CREATED' | 'UPDATED'\n\nexport type GetMessagesRequestType = {\n    startKey?: string\n    limit?: number\n    messageId?: string\n    messageIds?: Array<string>\n    groupId?: GroupId\n    to?: string\n    from?: string\n    type?: MessageType\n    statusCode?: string\n    duration?: {\n        dateType?: DateType\n        startDate: string\n        endDate: string\n    }\n}\n\nexport class GetMessagesRequest {\n    readonly startKey?: string;\n    readonly limit?: number;\n    readonly dateType?: DateType = 'CREATED';\n    readonly messageId?: string;\n    readonly messageIds?: Array<string>;\n    readonly groupId?: GroupId;\n    readonly to?: string;\n    readonly from?: string;\n    readonly type?: MessageType;\n    readonly statusCode?: string;\n    readonly startDate?: string;\n    readonly endDate?: string;\n\n    constructor(getMessageRequestType: GetMessagesRequestType) {\n        this.startKey = getMessageRequestType.startKey;\n        this.limit = getMessageRequestType.limit;\n        if (getMessageRequestType.duration?.dateType) this.dateType = getMessageRequestType.duration.dateType;\n        if (getMessageRequestType.duration) this.startDate = formatISO(stringDateTransfer(getMessageRequestType.duration.startDate));\n        if (getMessageRequestType.duration) this.endDate = formatISO(stringDateTransfer(getMessageRequestType.duration.endDate));\n        this.messageId = getMessageRequestType.messageId;\n        this.messageIds = getMessageRequestType.messageIds;\n        this.groupId = getMessageRequestType.groupId;\n        this.to = getMessageRequestType.to;\n        this.from = getMessageRequestType.from;\n        this.type = getMessageRequestType.type;\n        this.statusCode = getMessageRequestType.statusCode;\n    }\n}\n\nexport type GetStatisticsRequestType = {\n    duration?: {\n        startDate: string | Date\n        endDate: string | Date\n    }\n    masterAccountId: string\n}\n\nexport class GetStatisticsRequest {\n    readonly startDate: string;\n    readonly endDate: string;\n    readonly masterAccountId: string;\n\n    constructor(getStatisticsRequest: GetStatisticsRequestType) {\n        if (getStatisticsRequest.duration) this.startDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.startDate));\n        if (getStatisticsRequest.duration) this.endDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.endDate));\n        this.masterAccountId = getStatisticsRequest.masterAccountId;\n    }\n}\n\nexport type FileType = 'KAKAO' | 'MMS' | 'DOCUMENT' | 'RCS'\n\nexport type FileUploadRequest = {\n    file: string\n    type: FileType\n    name?: string\n    link?: string\n}\n\nexport type CreateGroupRequest = DefaultAgentType & {\n    allowDuplicates: boolean\n    appId?: string\n}\n\n/**\n * @description GET API 중 일부 파라미터 조회 시 필요한 객체\n * @see https://docs.solapi.com/api-reference/overview#operator\n */\nexport type DatePayloadType = {\n    [key in DateOperatorType]?: string | Date;\n};\n\nexport type GetKakaoChannelsRequest = {\n    channelId: string\n    searchId: string\n    phoneNumber: string\n    categoryCode: string\n    dateCreated: DatePayloadType\n    dateUpdated: DatePayloadType\n    startKey: string\n    limit: number\n}\n\nexport type CreateKakaoChannelTokenRequest = {\n    searchId: string\n    phoneNumber: string\n}\n\nexport type CreateKakaoChannelRequest = {\n    searchId: string\n    phoneNumber: string\n    categoryCode: string\n    token: string\n}\n\n/**\n * @description 카카오 알림톡 조회를 위한 요청 타입\n */\nexport type GetKakaoAlimtalkTemplatesRequest = {\n    /**\n     * @description 알림톡 템플릿 제목\n     */\n    name: string\n    /**\n     * @description 카카오 비즈니스 채널 ID\n     */\n    channelId: string\n    /**\n     * @description 카카오 알림톡 템플릿 ID\n     */\n    templateId: string\n    /**\n     * @description 숨긴 템플릿 여부 확인\n     */\n    isHidden: boolean\n    /**\n     * @description 알림톡 템플릿 상태\n     */\n    status: KakaoAlimtalkTemplateStatus\n    /**\n     * @description 페이지네이션 조회 키\n     */\n    startKey: string\n    /**\n     * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n     */\n    limit: number\n    /**\n     * @description 생성일자 (조회 조건 -> eq, lte, gte 등이 포함되어야 함)\n     */\n    dateCreated: DatePayloadType\n    /**\n     * @description 수정일자 (조회 조건 -> eq, lte, gte 등이 포함되어야 함)\n     */\n    dateUpdated: DatePayloadType\n}\n\n/**\n * @description 카카오 알림톡 템플릿 요청 타입\n */\nexport type KakaoAlimtalkTemplateRequest = {\n    /**\n     * @description 알림톡 템플릿 제목\n     */\n    name?: string;\n    /**\n     * @description 알림톡 템플릿 내용\n     */\n    content?: string;\n    /**\n     * @description 알림톡 템플릿 카테고리 코드, KakaoAlimtalkTemplateCategory 타입 참고\n     */\n    categoryCode?: string;\n    /**\n     * @description 알림톡 템플릿 버튼 배열\n     */\n    buttons?: Array<KakaoButton>;\n    /**\n     * @description 알림톡 템플릿 메시지 유형\n     */\n    messageType?: KakaoAlimtalkTemplateMessageType;\n    /**\n     * @description 카카오 알림톡 템플릿 강조 유형\n     */\n    emphasizeType?: KakaoAlimtalkTemplateEmphasizeType;\n    /**\n     * @description 부가정보, 치환문구를 넣을 수 없음\n     */\n    extra?: string;\n    /**\n     * @description 강조 표기 제목 (강조 표기형 유형만 등록 가능)\n     */\n    emphasizeTitle?: string;\n    /**\n     * @description 강조 표기 부제목 (강조 표기형 유형만 등록 가능)\n     */\n    emphasizeSubtitle?: string;\n    /**\n     * @description 보안 템플릿 여부\n     */\n    securityFlag?: boolean;\n    /**\n     * @description 알림톡 템플릿 내에 업로드 할 이미지 ID (Storage API 사용 필요)\n     */\n    imageId?: string;\n};\n\n/**\n * @description 카카오 알림톡 템플릿 생성 요청 타입\n * @see {@link KakaoAlimtalkTemplateRequest}\n * @param channelId - 카카오 비즈니스 채널 ID\n * @param channelGroupId - 카카오 비즈니스 채널 그룹 ID\n */\nexport type CreateKakaoAlimtalkTemplateRequest = KakaoAlimtalkTemplateRequest & {\n    channelId?: string;\n    channelGroupId?: string;\n}\n","import {parseISO} from 'date-fns';\nimport {InvalidDateError} from '../errors/defaultError';\n\n/**\n * 일반 문자열 날짜가 있을 경우 Date 타입으로 변환해주는 함수\n * @param value 일반 문자열 날짜 또는 Date 타입의 날짜\n */\nexport default function stringDateTransfer(value: string | Date): Date {\n    if (typeof value === 'string') {\n        value = parseISO(value);\n        const invalidDateText = 'Invalid Date';\n        if (value.toString() === invalidDateText) {\n            throw new InvalidDateError(invalidDateText);\n        }\n    }\n    return value;\n}\n","import {FailedMessage} from '../responses/messageResponses';\n\nexport type ErrorResponse = {\n    errorCode: string,\n    errorMessage: string\n}\n\nexport class InvalidDateError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InvalidDateError';\n    }\n}\n\nexport class ApiKeyError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InvalidApiKeyError';\n    }\n}\n\nexport class DefaultError extends Error {\n    constructor(errorCode: string, errorMessage: string) {\n        super(errorMessage);\n        this.name = errorCode;\n    }\n}\n\nexport class MessageNotReceivedError extends Error {\n    constructor(errorList: Array<FailedMessage>) {\n        super(JSON.stringify(errorList));\n        this.name = 'MessagesNotReceivedError';\n    }\n}\n","import getAuthInfo, {AuthenticationParameter} from './authenticator';\nimport fetch from 'cross-fetch';\nimport {DefaultError, ErrorResponse} from '../errors/defaultError';\n\ntype DefaultRequest = {\n    url: string,\n    method: string\n}\n\n/**\n * 공용 API 클라이언트 함수\n * @throws DefaultError 발송 실패 등 API 상의 다양한 오류를 표시합니다.\n * @param authParameter API 인증을 위한 파라미터\n * @param request API URI, HTTP method 정의\n * @param data API에 요청할 request body 데이터\n */\nexport default async function defaultFetcher<T, R>(authParameter: AuthenticationParameter, request: DefaultRequest, data?: T): Promise<R> {\n    const authorizationHeaderData = getAuthInfo(authParameter);\n    return await fetch(request.url, {\n        headers: {\n            'Authorization': authorizationHeaderData,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        method: request.method\n    }).then<R>(async (res) => {\n        if (res.status >= 400 && res.status < 500) {\n            const errorResponse: ErrorResponse = await res.json();\n            throw new DefaultError(errorResponse.errorCode, errorResponse.errorMessage);\n        } else if (res.status >= 500) {\n            const responseText = await res.text();\n            throw new DefaultError('UnknownException', responseText);\n        }\n        try {\n            return res.json();\n        } catch (exception) {\n            throw new Error(await res.text());\n        }\n    });\n}\n","import {customAlphabet} from 'nanoid';\nimport {formatISO} from 'date-fns';\nimport {HmacSHA256} from 'crypto-js';\nimport {ApiKeyError} from '../errors/defaultError';\n\nenum AuthenticateType {\n    API_KEY\n}\n\nexport type AuthenticationParameter = {\n    apiKey?: string\n    apiSecret?: string\n}\n\n\n/**\n * Get Authenticate Information for SOLAPI Requests\n * @param authenticationParameter\n * @param authType\n * @return string Authorization value\n */\nexport default function getAuthInfo(authenticationParameter: AuthenticationParameter, authType: AuthenticateType = AuthenticateType.API_KEY): string {\n    const {apiKey, apiSecret} = authenticationParameter;\n    switch (authType) {\n        case AuthenticateType.API_KEY:\n        default:\n            const salt = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 32)();\n            const date = formatISO(new Date());\n            const hmacData = date + salt;\n            if ((!apiKey || !apiSecret) || (apiKey === '' || apiSecret === '')) {\n                throw new ApiKeyError('Invalid API Key Error');\n            }\n            const signature = HmacSHA256(hmacData, apiSecret).toString();\n            return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;\n    }\n}\n","import {URL, URLSearchParams} from 'url';\n\n/**\n * @deprecated\n * @param url API URl\n * @param data object data\n */\nexport default function queryParameterGenerator<T extends object>(url: string, data?: T): string {\n    const apiUrl = new URL(url);\n    if (data) {\n        const urlSearchParams = new URLSearchParams();\n        Object.keys(data).forEach(key => {\n            const reflectedValue = Reflect.get(data, key);\n            if (reflectedValue) {\n                urlSearchParams.append(key, reflectedValue);\n            }\n        });\n        apiUrl.search = urlSearchParams.toString();\n    }\n    return apiUrl.toString();\n}\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}