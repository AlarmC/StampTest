/**
 * @name "카카오 버튼타입"
 */
type KakaoButtonType = 'WL' | 'AL' | 'BK' | 'MD' | 'DS' | 'BC' | 'BT' | 'AC';
type KakaoButton = {
    buttonName: string;
    buttonType: KakaoButtonType;
    linkMo?: string;
    linkPc?: string;
    linkAnd?: string;
    linkIos?: string;
};
declare class KakaoOption {
    pfId: string;
    templateId?: string;
    variables?: Record<string, string>;
    disableSms: boolean;
    adFlag: boolean;
    buttons?: Array<KakaoButton>;
    imageId?: string;
    constructor(pfId: string, templateId: string, variables: Record<string, string>, disableSms: boolean, adFlag: boolean, buttons: Array<KakaoButton>, imageId: string);
}
/**
 * @name MessageType 메시지 유형(단문 문자, 장문 문자, 알림톡 등)
 * SMS: 단문 문자
 * LMS: 장문 문자
 * MMS: 사진 문자
 * ATA: 알림톡
 * CTA: 친구톡
 * CTI: 사진 한장이 포함된 친구톡
 * RCS_SMS: RCS 단문 문자
 * RCS_LMS: RCS 장문 문자
 * RCS_MMS: RCS 사진 문자
 * RCS_TPL: RCS 템플릿
 * NSA: 네이버 스마트알림(톡톡)
 */
type MessageType = 'SMS' | 'LMS' | 'MMS' | 'ATA' | 'CTA' | 'CTI' | 'RCS_SMS' | 'RCS_LMS' | 'RCS_MMS' | 'RCS_TPL' | 'NSA';
/**
 * 메시지 모델, 전체적인 메시지 발송을 위한 파라미터는 이 Message 모델에서 관장함
 */
declare class Message {
    /**
     * 수신번호
     */
    to: string;
    /**
     * 발신번호
     */
    from: string;
    /**
     * 메시지 내용
     */
    text?: string;
    /**
     * 메시지 생성일자
     */
    dateCreated?: string;
    /**
     * 메시지 수정일자
     */
    dateUpdated?: string;
    /**
     * 메시지의 그룹 ID
     */
    groupId?: string;
    /**
     * 해당 메시지의 ID
     */
    messageId?: string;
    /**
     * MMS 전용 스토리지(이미지) ID
     */
    imageId?: string;
    /**
     * @name MessageType 메시지 유형
     */
    type?: MessageType;
    /**
     * 문자 제목(LMS, MMS 전용)
     */
    subject?: string;
    /**
     * 메시지 타입 감지 여부(비활성화 시 반드시 타입이 명시 되어야 함)
     */
    autoTypeDetect: boolean;
    /**
     * 카카오 알림톡/친구톡을 위한 프로퍼티
     */
    kakaoOptions?: KakaoOption;
    /**
     * 해외 문자 발송을 위한 국가번호(예) "82", "1" 등)
     */
    country?: string | undefined;
    /**
     * 메시지 로그
     */
    log?: Array<object>;
    constructor(to: string, from: string, text: string, dateCreated: string, dateUpdated: string, groupId: string, messageId: string, imageId: string, type: MessageType, subject: string, autoTypeDetect: boolean, kakaoOptions: KakaoOption, country: string);
}
type Count = {
    total: number;
    sentTotal: number;
    sentFailed: number;
    sentSuccess: number;
    sentPending: number;
    sentReplacement: number;
    refund: number;
    registeredFailed: number;
    registeredSuccess: number;
};
type CountryChargeStatus = Record<string, number>;
type CountForCharge = {
    sms: CountryChargeStatus;
    lms: CountryChargeStatus;
    mms: CountryChargeStatus;
    ata: CountryChargeStatus;
    cta: CountryChargeStatus;
    cti: CountryChargeStatus;
    nsa: CountryChargeStatus;
    rcs_sms: CountryChargeStatus;
    rcs_lms: CountryChargeStatus;
    rcs_mms: CountryChargeStatus;
    rcs_tpl: CountryChargeStatus;
};
type CommonCashResponse = {
    requested: number;
    replacement: number;
    refund: number;
    sum: number;
};
type MessageTypeRecord = {
    sms: number;
    lms: number;
    mms: number;
    ata: number;
    cta: number;
    cti: number;
    nsa: number;
    rcs_sms: number;
    rcs_lms: number;
    rcs_mms: number;
    rcs_tpl: number;
};
type App = {
    profit: MessageTypeRecord;
    appId: string | null | undefined;
};
type Log = Array<object>;
type GroupId = string;
type Group = {
    count: {
        total: number;
        sentTotal: number;
        sentFailed: number;
        sentSuccess: number;
        sentPending: number;
        sentReplacement: number;
        refund: number;
        registeredFailed: number;
        registeredSuccess: number;
    };
    balance: CommonCashResponse;
    point: CommonCashResponse;
    app: App;
    sdkVersion: string;
    osPlatform: string;
    log: Log;
    status: string;
    scheduledDate?: string;
    dateSent?: string;
    dateCompleted?: string;
    isRefunded: boolean;
    groupId: GroupId;
    accountId: string;
    countForCharge: CountForCharge;
    dateCreated: string;
    dateUpdated: string;
};
/**
 * @description 검색 조건 파라미터
 * @see https://docs.solapi.com/api-reference/overview#operator
 */
type DateOperatorType = 'eq' | 'gte' | 'lte' | 'gt' | 'lt';
/**
 * @description 카카오 알림톡 템플릿 상태<br><br>
 * PENDING - 대기<br><br>
 * INSPECTING - 검수중<br><br>
 * APPROVED - 등록완료(검수완료)<br><br>
 * REJECTED - 반려됨<br><br>
 * DELETED - 삭제됨
 */
type KakaoAlimtalkTemplateStatus = 'PENDING' | 'INSPECTING' | 'APPROVED' | 'REJECTED' | 'DELETED';
/**
 * @description 카카오 채널 카테고리 타입
 * @property code 카테고리 코드번호
 * @property name 카테고리 설명(이름)
 */
type KakaoChannelCategory = {
    code: string;
    name: string;
};
/**
 * @description 카카오 채널 카테고리 타입
 * @property code 카테고리 코드번호
 * @property name 카테고리 설명(이름)
 */
type KakaoAlimtalkTemplateCategory = KakaoChannelCategory;
/**
 * @description 카카오 채널
 * @property channelId 카카오 채널 고유 ID, SOLAPI 내부 식별용
 * @property searchId 카카오 채널 검색용 아이디, 채널명이 아님
 * @property accountId 계정 고유번호
 * @property phoneNumber 카카오 채널 담당자 휴대전화 번호
 * @property sharedAccountIds 카카오 채널을 공유한 SOLAPI 계정 고유번호 목록
 * @property dateCreated 카카오 채널 생성일자(연동일자)
 * @property dateUpdated 카카오 채널 정보 수정일자
 */
type KakaoChannel = {
    channelId: string;
    searchId: string;
    accountId: string;
    phoneNumber: string;
    sharedAccountIds: Array<string>;
    dateCreated: string;
    dateUpdated: string;
};
/**
 * @description 카카오 알림톡 템플릿 메시지 유형<br>
 * BA:기본형, EX:부가정보형, AD:광고추가형, MI: 복합형
 */
type KakaoAlimtalkTemplateMessageType = 'BA' | 'EX' | 'AD' | 'MI';
/**
 * @description 카카오 알림톡 템플릿 강조 유형<br>
 * NONE: 선택안함, TEXT: 강조표기형, IMAGE: 이미지형
 */
type KakaoAlimtalkTemplateEmphasizeType = 'NONE' | 'TEXT' | 'IMAGE';
/**
 * @description 카카오 알림톡 템플릿 그룹 유형(기본값은 Channel)
 */
type KakaoAlimtalkTemplateAssignType = 'CHANNEL' | 'GROUP';
type KakaoAlimtalkTemplateCommentType = {
    isAdmin: boolean;
    memberId: string;
    content: string;
    dateCreated: string;
};
type KakaoAlimtalkTemplateCodeType = {
    status: Omit<KakaoAlimtalkTemplateStatus, 'DELETED'>;
    comments: Array<KakaoAlimtalkTemplateCommentType>;
};
/**
 * @description 카카오 알림톡 템플릿 모델<br>
 * 알림톡 템플릿 자체의 정보는 아래 페이지를 참고해보세요!
 * @see https://kakaobusiness.gitbook.io/main/ad/bizmessage/notice-friend/content-guide
 */
declare class KakaoAlimtalkTemplate {
    /**
     * 카카오 비즈니스 채널 ID
     */
    channelId: string | null;
    /**
     * 카카오 비즈니스 채널 그룹 ID
     */
    channelGroupId: string | null;
    /**
     * 알림톡 템플릿 내용
     */
    content: string;
    /**
     * 알림톡 템플릿 숨김 여부
     */
    isHidden: boolean;
    /**
     * 알림톡 템플릿 메시지 유형
     */
    messageType: KakaoAlimtalkTemplateMessageType;
    /**
     * 강조 유형
     */
    emphasizeType: KakaoAlimtalkTemplateEmphasizeType;
    /**
     * 부가정보
     * 메시지 유형이 "부가정보형"또는 "복합형"일 경우 필수
     */
    extra: string | null;
    /**
     * 간단 광고 문구
     * 메시지 유형이 "광고추가형"또는 "복합형"일 경우 필수
     */
    ad: string | null;
    /**
     * 강조표기 핵심문구 (변수사용가능, emphasizeType이 TEXT일 경우 필수 값)
     * 템플릿 내용에 강조표기할 핵심문구가 동일하게 포함되어 있어야합니다.
     */
    emphasizeTitle: string | null;
    /**
     * 강조표기 보조문구(emphasizeType이 TEXT일 경우 필수 값)
     * 템플릿 내용에 강조표기할 보조문구가 동일하게 포함되어 있어야합니다.
     */
    emphasizeSubtitle: string | null;
    /**
     * PC 노출 여부
     * OTP, 보안 메시지의 경우 유저선택 무관 PC 미노출
     */
    securityFlag: boolean;
    /**
     * 템플릿에 사용되는 이미지 ID
     */
    imageId: string | null;
    /**
     * 카카오 알림톡 템플릿 그룹 유형
     */
    assignType: KakaoAlimtalkTemplateAssignType;
    /**
     * 카카오 알림톡 템플릿 버튼 목록
     */
    buttons: Array<KakaoButton>;
    /**
     * 카카오 알림톡 템플릿 상태 현황목록
     */
    codes: Array<KakaoAlimtalkTemplateCodeType> | null;
    /**
     * 알림톡 템플릿 생성일자
     */
    dateCreated: string;
    /**
     * 알림톡 템플릿 수정일자
     */
    dateUpdated: string;
}
type SingleMessageSentResponse = {
    groupId: string;
    to: string;
    from: string;
    type: MessageType;
    statusMessage: string;
    country: string;
    messageId: string;
    statusCode: string;
    accountId: string;
};
type GroupMessageResponse = {
    count: Count;
    countForCharge: CountForCharge;
    balance: CommonCashResponse;
    point: CommonCashResponse;
    app: App;
    log: Log;
    status: string;
    allowDuplicates: boolean;
    isRefunded: boolean;
    accountId: string;
    masterAccountId: string | null;
    apiVersion: string;
    groupId: string;
    price: object;
    dateCreated: string;
    dateUpdated: string;
    scheduledDate?: string;
    dateSent?: string;
    dateCompleted?: string;
};
type FailedMessage = {
    to: string;
    from: string;
    type: string;
    statusMessage: string;
    country: string;
    messageId: string;
    statusCode: string;
    accountId: string;
};
type DetailGroupMessageResponse = {
    /**
    * 메시지 발송 접수에 실패한 메시지 요청 목록들
    * */
    failedMessageList: Array<FailedMessage>;
    /**
    * 발송 정보(성공, 실패 등) 응답 데이터
     */
    groupInfo: GroupMessageResponse;
};
type AddMessageResult = {
    to: string;
    from: string;
    type: string;
    country: string;
    messageId: string;
    statusCode: string;
    statusMessage: string;
    accountId: string;
};
type AddMessageResponse = {
    errorCount: string;
    resultList: Array<AddMessageResult>;
};
type GetMessagesResponse = {
    startKey: string | null;
    nextKey: string | null;
    limit: number;
    messageList: Record<string, Message>;
};
type RemoveGroupMessagesResponse = {
    groupId: GroupId;
    errorCount: number;
    resultList: Array<{
        messageId: string;
        resultCode: string;
    }>;
};
type GetGroupsResponse = {
    startKey: string | null | undefined;
    limit: number;
    nextKey: string | null | undefined;
    groupList: Record<GroupId, Group>;
};
type StatisticsPeriodResult = {
    total: number;
    sms: number;
    lms: number;
    mms: number;
    ata: number;
    cta: number;
    cti: number;
    nsa: number;
    rcs_sms: number;
    rcs_lms: number;
    rcs_mms: number;
    rcs_tpl: number;
};
type GetStatisticsResponse = {
    balance: number;
    point: number;
    monthlyBalanceAvg: number;
    monthlyPointAvg: number;
    monthPeriod: Array<{
        date: string;
        balance: number;
        balanceAvg: number;
        point: number;
        pointAvg: number;
        dayPeriod: Array<{
            _id: string;
            month: string;
            balance: number;
            point: number;
            statusCode: Record<string, MessageTypeRecord>;
            refund: {
                balance: number;
                point: number;
            };
            total: StatisticsPeriodResult;
            successed: StatisticsPeriodResult;
            failed: StatisticsPeriodResult;
        }>;
        refund: {
            balance: number;
            balanceAvg: number;
            point: number;
            pointAvg: number;
        };
        total: StatisticsPeriodResult;
        successed: StatisticsPeriodResult;
        failed: StatisticsPeriodResult;
    }>;
    total: StatisticsPeriodResult;
    successed: StatisticsPeriodResult;
    failed: StatisticsPeriodResult;
    dailyBalanceAvg: number;
    dailyPointAvg: number;
    dailyTotalCountAvg: number;
    dailyFailedCountAvg: number;
    dailySuccessedCountAvg: number;
};
type GetBalanceResponse = {
    balance: number;
    point: number;
};
type FileUploadResponse = {
    fileId: string;
    type: string;
    link: string | null | undefined;
};
type GetKakaoChannelsResponse = {
    limit: number;
    startKey: string;
    nextKey: string | null;
    channelList: Array<KakaoChannel>;
};
type RequestKakaoChannelTokenResponse = {
    success: boolean;
};
type CreateKakaoChannelResponse = {
    accountId: string;
    phoneNumber: string;
    searchId: string;
    dateCreated: string;
    dateUpdated: string;
    channelId: string;
};
type GetKakaoAlimtalkTemplatesResponse = {
    limit: number;
    templateList: Array<KakaoAlimtalkTemplate>;
    startKey: string;
    nextKey: string | null;
};
type GetGroupMessagesRequest = {
    startKey?: string;
    limit?: number;
};
type GetGroupsRequest = {
    startKey?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
};
type DateType = 'CREATED' | 'UPDATED';
type GetMessagesRequestType = {
    startKey?: string;
    limit?: number;
    messageId?: string;
    messageIds?: Array<string>;
    groupId?: GroupId;
    to?: string;
    from?: string;
    type?: MessageType;
    statusCode?: string;
    duration?: {
        dateType?: DateType;
        startDate: string;
        endDate: string;
    };
};
type GetStatisticsRequestType = {
    duration?: {
        startDate: string | Date;
        endDate: string | Date;
    };
    masterAccountId: string;
};
type FileType = 'KAKAO' | 'MMS' | 'DOCUMENT' | 'RCS';
/**
 * @description GET API 중 일부 파라미터 조회 시 필요한 객체
 * @see https://docs.solapi.com/api-reference/overview#operator
 */
type DatePayloadType = {
    [key in DateOperatorType]?: string | Date;
};
type GetKakaoChannelsRequest = {
    channelId: string;
    searchId: string;
    phoneNumber: string;
    categoryCode: string;
    dateCreated: DatePayloadType;
    dateUpdated: DatePayloadType;
    startKey: string;
    limit: number;
};
type CreateKakaoChannelTokenRequest = {
    searchId: string;
    phoneNumber: string;
};
type CreateKakaoChannelRequest = {
    searchId: string;
    phoneNumber: string;
    categoryCode: string;
    token: string;
};
/**
 * @description 카카오 알림톡 조회를 위한 요청 타입
 */
type GetKakaoAlimtalkTemplatesRequest = {
    /**
     * @description 알림톡 템플릿 제목
     */
    name: string;
    /**
     * @description 카카오 비즈니스 채널 ID
     */
    channelId: string;
    /**
     * @description 카카오 알림톡 템플릿 ID
     */
    templateId: string;
    /**
     * @description 숨긴 템플릿 여부 확인
     */
    isHidden: boolean;
    /**
     * @description 알림톡 템플릿 상태
     */
    status: KakaoAlimtalkTemplateStatus;
    /**
     * @description 페이지네이션 조회 키
     */
    startKey: string;
    /**
     * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)
     */
    limit: number;
    /**
     * @description 생성일자 (조회 조건 -> eq, lte, gte 등이 포함되어야 함)
     */
    dateCreated: DatePayloadType;
    /**
     * @description 수정일자 (조회 조건 -> eq, lte, gte 등이 포함되어야 함)
     */
    dateUpdated: DatePayloadType;
};
/**
 * @description 카카오 알림톡 템플릿 요청 타입
 */
type KakaoAlimtalkTemplateRequest = {
    /**
     * @description 알림톡 템플릿 제목
     */
    name?: string;
    /**
     * @description 알림톡 템플릿 내용
     */
    content?: string;
    /**
     * @description 알림톡 템플릿 카테고리 코드, KakaoAlimtalkTemplateCategory 타입 참고
     */
    categoryCode?: string;
    /**
     * @description 알림톡 템플릿 버튼 배열
     */
    buttons?: Array<KakaoButton>;
    /**
     * @description 알림톡 템플릿 메시지 유형
     */
    messageType?: KakaoAlimtalkTemplateMessageType;
    /**
     * @description 카카오 알림톡 템플릿 강조 유형
     */
    emphasizeType?: KakaoAlimtalkTemplateEmphasizeType;
    /**
     * @description 부가정보, 치환문구를 넣을 수 없음
     */
    extra?: string;
    /**
     * @description 강조 표기 제목 (강조 표기형 유형만 등록 가능)
     */
    emphasizeTitle?: string;
    /**
     * @description 강조 표기 부제목 (강조 표기형 유형만 등록 가능)
     */
    emphasizeSubtitle?: string;
    /**
     * @description 보안 템플릿 여부
     */
    securityFlag?: boolean;
    /**
     * @description 알림톡 템플릿 내에 업로드 할 이미지 ID (Storage API 사용 필요)
     */
    imageId?: string;
};
/**
 * @description 카카오 알림톡 템플릿 생성 요청 타입
 * @see {@link KakaoAlimtalkTemplateRequest}
 * @param channelId - 카카오 비즈니스 채널 ID
 * @param channelGroupId - 카카오 비즈니스 채널 그룹 ID
 */
type CreateKakaoAlimtalkTemplateRequest = KakaoAlimtalkTemplateRequest & {
    channelId?: string;
    channelGroupId?: string;
};
/**
 * SOLAPI 메시지 서비스
 * 발송 및 조회 등 SOLAPI에서 제공되는 여러 API의 기능을 쉽게 사용할 수 있습니다.
 * SOLAPI 자체의 서비스에 관한 사항은 SOLAPI 홈페이지를 참고해주세요.
 * @see https://solapi.github.io/solapi-nodejs
 */
export class SolapiMessageService {
    constructor(apiKey: string, apiSecret: string);
    /**
     * 메시지 발송 기능, sendMany 함수에서 조금 더 개선된 오류 표시 기능등을 제공합니다.
     * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.
     * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)
     * @param scheduledDate 예약일시
     * @param allowDuplicates 중복 수신번호 허용 여부
     * @param appId appstore용 app id
     * @throws MessageNotReceivedError 메시지가 모두 발송 접수가 불가한 상태일 경우 MessageNotReceivedError 예외가 발생합니다.
     */
    send(messages: Message | Array<Message>, scheduledDate?: string | Date, allowDuplicates?: boolean, appId?: string): Promise<DetailGroupMessageResponse>;
    /**
     * 단일 메시지 발송 기능
     * @param message 메시지(문자, 알림톡 등)
     * @param appId appstore용 app id
     */
    sendOne(message: Message, appId?: string): Promise<SingleMessageSentResponse>;
    /**
     * 단일 메시지 예약 발송 기능
     * @param message 메시지(문자, 알림톡 등)
     * @param scheduledDate 예약일시
     */
    sendOneFuture(message: Message, scheduledDate: string | Date): Promise<GroupMessageResponse>;
    /**
     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!
     * 여러 메시지 즉시 발송 기능
     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
     * @param messages 여러 메시지(문자, 알림톡 등)
     * @param allowDuplicates 중복 수신번호 허용
     * @param appId appstore용 app id
     */
    sendMany(messages: Array<Message>, allowDuplicates?: boolean, appId?: string): Promise<GroupMessageResponse>;
    /**
     * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!
     * 여러 메시지 예약 발송 기능
     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
     * @param messages 여러 메시지(문자, 알림톡 등)
     * @param scheduledDate 예약 발송 일자
     * @param allowDuplicates 중복 수신번호 허용
     * @param appId appstore용 app id
     */
    sendManyFuture(messages: Array<Message>, scheduledDate: string | Date, allowDuplicates?: boolean, appId?: string): Promise<GroupMessageResponse>;
    /**
     * 그룹 생성
     */
    createGroup(allowDuplicates?: boolean, appId?: string): Promise<GroupId>;
    /**
     * 그룹 메시지 추가
     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
     * @param groupId 생성 된 Group ID
     * @param messages 여러 메시지(문자, 알림톡 등)
     */
    addMessagesToGroup(groupId: GroupId, messages: Required<Array<Message>>): Promise<AddMessageResponse>;
    /**
     * 그룹 메시지 전송 요청
     * @param groupId 생성 된 Group ID
     */
    sendGroup(groupId: GroupId): Promise<GroupMessageResponse>;
    /**
     * 그룹 예약 발송 설정
     * @param groupId 생성 된 Group ID
     * @param scheduledDate 예약발송 할 날짜
     */
    reserveGroup(groupId: GroupId, scheduledDate: Date): Promise<GroupMessageResponse>;
    /**
     * 단일 그룹정보 조회
     * @param groupId 그룹 ID
     */
    getGroup(groupId: GroupId): Promise<GroupMessageResponse>;
    /**
     * 그룹 통계 정보 조회
     * @param data 그룹 정보 상세 조회용 request 데이터, date 관련 파라미터는 iso8601 포맷으로 보내야 함
     */
    getGroups(data?: GetGroupsRequest): Promise<GetGroupsResponse>;
    /**
     * 그룹 내 메시지 목록 조회
     * @param groupId 생성 된 Group ID
     * @param data startkey, limit 등 쿼리 조건 파라미터
     */
    getGroupMessages(groupId: GroupId, data?: GetGroupMessagesRequest): Promise<GetMessagesResponse>;
    /**
     * 그룹 내 특정 메시지 삭제
     * @param groupId 생성 된 Group Id
     * @param messageIds 생성 된 메시지 ID 목록
     */
    removeGroupMessages(groupId: GroupId, messageIds: Required<Array<string>>): Promise<RemoveGroupMessagesResponse>;
    /**
     * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)
     * @param groupId 생성 된 Group ID
     */
    removeReservationToGroup(groupId: GroupId): Promise<GroupMessageResponse>;
    /**
     * 그룹 삭제
     * @param groupId
     */
    removeGroup(groupId: GroupId): Promise<GroupMessageResponse>;
    /**
     * 메시지 목록 조회
     * @param data 목록 조회 상세조건 파라미터
     */
    getMessages(data?: Readonly<GetMessagesRequestType>): Promise<GetMessagesResponse>;
    /**
     * 통계 조회
     * @param data 통계 상세 조건 파라미터
     * @returns GetStatisticsResponse 통계 결과
     */
    getStatistics(data?: Readonly<GetStatisticsRequestType>): Promise<GetStatisticsResponse>;
    /**
     * 잔액조회
     * @returns GetBalanceResponse
     */
    getBalance(): Promise<GetBalanceResponse>;
    /**
     * 파일(이미지) 업로드
     * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음
     * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL
     * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS
     * @param name 파일 이름
     * @param link 파일 링크, 친구톡의 경우 필수 값
     */
    uploadFile(filePath: string, fileType: FileType, name?: string, link?: string): Promise<FileUploadResponse>;
    /**
     * 카카오 채널 카테고리 조회
     */
    getKakaoChannelCategories(): Promise<Array<KakaoChannelCategory>>;
    /**
     * 카카오 채널 목록 조회
     * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터
     */
    getKakaoChannels(data?: Partial<GetKakaoChannelsRequest>): Promise<GetKakaoChannelsResponse>;
    /**
     * @description 카카오 채널 조회
     * @param channelId 카카오 채널 ID(구 pfId)
     */
    getKakaoChannel(channelId: string): Promise<KakaoChannel>;
    /**
     * @description 카카오 채널 연동을 위한 인증 토큰 요청
     */
    requestKakaoChannelToken(data: CreateKakaoChannelTokenRequest): Promise<RequestKakaoChannelTokenResponse>;
    /**
     * @description 카카오 채널 연동 메소드
     * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!
     */
    createKakaoChannel(data: CreateKakaoChannelRequest): Promise<CreateKakaoChannelResponse>;
    /**
     * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!
     * @param channelId 카카오 채널 ID
     */
    removeKakaoChannel(channelId: string): Promise<KakaoChannel>;
    /**
     * 카카오 템플릿 목록 조회
     * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터
     */
    getKakaoAlimtalkTemplates(data?: Partial<GetKakaoAlimtalkTemplatesRequest>): Promise<GetKakaoAlimtalkTemplatesResponse>;
    /**
     * 카카오 템플릿 상세 조회
     * @param templateId 카카오 알림톡 템플릿 ID
     */
    getKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate>;
    /**
     * 카카오 템플릿 카테고리 조회
     */
    getKakaoAlimtalkTemplateCategories(): Promise<Array<KakaoAlimtalkTemplateCategory>>;
    /**
     * @description 카카오 알림톡 템플릿 생성
     * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!
     * @param data 알림톡 템플릿 생성을 위한 파라미터
     */
    createKakaoAlimtalkTemplate(data: CreateKakaoAlimtalkTemplateRequest): Promise<KakaoAlimtalkTemplate>;
    /**
     * 카카오 알림톡 템플릿 검수 요청
     * @param templateId 카카오 알림톡 템플릿 ID
     */
    requestInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate>;
    /**
     * 카카오 알림톡 템플릿 검수 취소 요청
     * @param templateId 카카오 알림톡 템플릿 ID
     */
    cancelInspectionKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate>;
    /**
     * 카카오 알림톡 템플릿 수정(검수 X)
     * @param templateId 카카오 알림톡 템플릿 ID
     * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터
     */
    updateKakaoAlimtalkTemplate(templateId: string, data: KakaoAlimtalkTemplateRequest): Promise<object>;
    /**
     * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)
     * @param templateId 카카오 알림톡 템플릿 ID
     */
    deleteKakaoAlimtalkTemplate(templateId: string): Promise<KakaoAlimtalkTemplate>;
}

//# sourceMappingURL=index.d.ts.map
